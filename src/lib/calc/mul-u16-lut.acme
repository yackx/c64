; Very fast multiplication of 8-bit unsigned integers using a lookup table.
;
; Given:
;
;   (a + x)^2 = a^2 + 2ax + x^2
;
; Solve for ax, and a multiplication becomes
;
;   ax = (a + x)^2 / 2 - a^2 / 2 - x^2 / 2
;
; n^2 / 2 can be calculated using lookup tables.
;
; From:
; https://github.com/TobyLobster/multiply_test/blob/main/tests/mult5.a
; https://everything2.com/user/yerricde/writeups/Fast+6502+multiplication
;
; IN:       A = factor A
;           X = factor X
;
; OUT:      PRODUCT_LO = R3 = low byte of product
;           PRODUCT_HI = R4 = high byte of product
;           A = PRODUCT_HI
;           FACTOR_A = R5 = factor A
;           FACTOR_X = R6 = factor X
;
; USES:     R5, R6, X

            ;ACME 0.97
            !cpu 6510

            !src <lib/registers/pseudo-registers.acme>

            FACTOR_A = R5
            FACTOR_X = R6
            PRODUCT_LO = R3
            PRODUCT_HI = R4


mul_u16_lut:
            sta FACTOR_A
            stx FACTOR_X

            ; (a + x)^2 / 2
            
            clc
            adc FACTOR_X
            tax
            bcc +
            lda .hi_512,x
            bcs ++
+
            lda .hi_256,x
            sec
++
            sta PRODUCT_HI

            ; -a^2 / 2
            
            lda .lo_256,x
            ldx FACTOR_A
            sbc .lo_256,x
            sta PRODUCT_LO
            lda PRODUCT_HI
            sbc .hi_256,x
            sta PRODUCT_HI

            ; + x & a & 1
            ; workaround rounding error
            ; when odd * odd
            
            ldx FACTOR_X
            txa
            and FACTOR_A
            and #1
            clc
            adc PRODUCT_LO
            bcc +
            inc PRODUCT_HI
+
            ; - x^2 / 2

            sec
            sbc .lo_256,x
            sta PRODUCT_LO
            lda PRODUCT_HI
            sbc .hi_256,x
            sta PRODUCT_HI

            rts


; Lookup tables for n^2 / 2.
;
; 0 <= n <= 255   : lo_256 with hi_256
; 256 <= n <= 511 : lo_256 with hi_512
; The lo_256 is common to both ranges as the same pattern repeats.
;
; n       0   1    2    3   4   5    ... 255
; ---------------------------------------------
; n^2/2   0   .5   2    4.5 8   12.5     32512.5
; rnd up  0   1    2    5   8   13       32513
; = hex   00  02   02   05  08  0D       7F01
; lo_256  0   1    2    5   8   13       1
; hi_256  0   0    0    0   0   0        127
;
; n       ... 256    257     ...  510
; --------------------------------------
; n^2/2       32768  32024.5      130050
; rnd up      32768  32025        130050
; = hex       8000   7D19         1F202
; lo_256      0      1            2
; hi_512      128    129          252
;
; Unlike the original example, there is no need to generate
; the tables with a script and hardcode them.
; ACME supports a !for directive with arithmetic expressions.
; We can leverage this to generate the tables on the spot.
;
; < means low byte and > means high byte.
; float to avoid integer truncation.
; +0.5 force rounding up, for instance n=3 -> n^2/2 = 3^2/2 = 2.5 -> 3
;
.lo_256     !for .i, 0, 255 { !byte <(float(.i^2) / 2 + 0.5) }
.hi_256     !for .i, 0, 255 { !byte >(float(.i^2) / 2 + 0.5) }
.hi_512     !for .i, 256, 511 { !byte >(float(.i^2) / 2 + 0.5) }
