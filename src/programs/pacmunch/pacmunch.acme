; Pac-munch
;
; This crazy pacmunch will eat all characters on the screen.

            ;ACME 0.97
            !cpu 6510

            !src <lib/mmap/zp-free.acme>
            !src <lib/mmap/main.acme>
            !src <lib/mmap/vic-ii.acme>
            !src <lib/screen/color.acme>

            !src <lib/misc/upstart.acme>

            ; Sprite bitmap address and sprite page (always a multiple of 64)
            SPRITE_BASE_ADDR = $2000
            SPRITE_PAGE = SPRITE_BASE_ADDR / 64

            RASTER_LINE = 251               ; Not visible on screen
            FRAME_SKIP = 1                  ; Skip frames each tick
            CYCLE_SPRITE_SKIPS = 4          ; Move 4 pixels before animating sprite
            SPRITE_FRAME_COUNT = 4          ; Pacmunch is composed of 4 frames
            PIXELS_PER_CHAR = 8             ; Encounter one char every 8 pixels
            MUNCHED_CHAR = ' '              ; White space
            END_ROW = 200

            CURRENT_CHAR = R1
            CURR_CYCLE_SPRITE_SKIP = R5
            CURR_SPRITE_FRAME = R6


main:
            jsr print_msg
            jsr setup_sprites
            jsr setup_counters
            jsr munch
            rts

; Print some text on the screen so that pacmunch can eat it
print_msg:
            lda #<msg
            sta R1
            lda #>msg
            sta R2
            jsr strout
            rts


; Setup sprite #0
setup_sprites:
            ldy #0
-           lda sprite, y
            sta SPRITE_BASE_ADDR, y         ; move sprite bitmaps
            iny
            bne -

            lda #SPRITE_PAGE
            sta DEFAULT_SPRITE_PTR_AREA     ; sprite #0

            lda #0
            sta $d010                       ; sprite #0 8th bit x left part

            lda #0
            sta $d000
            lda #66
            sta $d001                       ; sprite #0: x=0, y=66

            lda #COLOR_YELLOW
            sta SP0COLOR                    ; sprite #0 is yellow

            lda #1
            sta SPENA                       ; enable sprite #0

            lda #<DEFAULT_SCREEN_MEM + 3*40 ; current char location
            sta CURRENT_CHAR                ; is the first col of 3rd row
            lda #>DEFAULT_SCREEN_MEM + 3*40
            sta CURRENT_CHAR + 1

            rts


; Setup some counters
setup_counters:
            lda #CYCLE_SPRITE_SKIPS         ; init sprite cycle skip counter
            sta CURR_CYCLE_SPRITE_SKIP

            lda #SPRITE_FRAME_COUNT
            sta CURR_SPRITE_FRAME           ; init sprite frame counter

            ldy #0                          ; current pixel in char

            rts


; Munch characters
munch:
            lda #RASTER_LINE
.wait_rast: cmp RASTER                      ; busy wait for next raster line
            bne .wait_rast

            lda $d010                       ; sprite #0: x > 255 ?
            beq on_char                     ; sprite #0 has x > 255
            lda $d000
            cmp #320-255-1                  ; sprite #0 x out of screen (right)?
            bcs x_test                      ; then don't try to munch char

; Test if we are on a character (every PIXELS_PER_CHAR - using Y register)
on_char:    iny                             ; pacmunch is on a char
            cpy #PIXELS_PER_CHAR            ; have we reached the next char?
            bne x_test

munch_it:   lda #MUNCHED_CHAR               ; pacmunch is on a new char
            ldy #0                          ; reset pixels in char counter
            sta (CURRENT_CHAR), y           ; munch the char
            lda #PIXELS_PER_CHAR
            inc CURRENT_CHAR                ; next char location low byte
            bne x_test
            inc CURRENT_CHAR + 1            ; next char location high byte

; Test on which part of the screen is sprite #0
x_test:     lda $d010                       ; sprite #0: x > 255 ?
            bne x_right                     ; sprite #0 has x > 255

; Sprite #0 on the left part of the screen (x-coord <= 255)
x_left:     nop                             ; slow things down
            nop                             ; when on the left part of screen
            inc $d000                       ; move one pixel to the right
            bne cycle_sprite                ; not reached yet x-coord=255
            inc $d010                       ; sprite #0: x-coord bit #8
            jmp cycle_sprite

; Sprite #0 on the right part of the screen (x-coord > 255)
x_right:    inc $d000                       ; move one pixel to the right

            lda $d000
            cmp #10+320-255+20              ; reached right border?
            bne cycle_sprite

.right_border_reached:
            lda #0                          ; border reached
            sta $d000                       ; sprite #0: x=0
            sta $d010                       ; sprite #0: x bit #8

            lda #7
            clc
            adc $d001                       ; sprite #0: y-coord next text line
            cmp #END_ROW
            bcs end                         ; done if reached bottom of screen
            sta $d001                       ; next text line: add 8 pixels to y

; Animate the sprite #0 by cycling through the bitmap
cycle_sprite:
            dec CURR_CYCLE_SPRITE_SKIP      ; skip some cycles
            bne munch

            lda #CYCLE_SPRITE_SKIPS         ; reset cycle skip counter
            sta CURR_CYCLE_SPRITE_SKIP

            dec CURR_SPRITE_FRAME           ; next frame
            beq +
            inc DEFAULT_SPRITE_PTR_AREA
            bne munch
+           lda #SPRITE_FRAME_COUNT
            sta CURR_SPRITE_FRAME
            lda #SPRITE_PAGE
            sta DEFAULT_SPRITE_PTR_AREA     ; reset to first frame
            bne munch

end:
            rts


msg:
            !fill 13, 32
            !pet "crazy pacmunch"
            !byte 13, 13
            !fill 11, 32
            !pet "is on  ur screen"
            !byte 13, 13
            !fill 12, 32
            !pet "eating ur text"
            !byte 0


            !src <lib/strings/strout.acme>

sprite:
            !bin <programs/pacmunch/pacmunch.bin>

