; Test joysticks

            ;ACME 0.97

            !cpu 6510

            !src <lib/mmap/mmap.acme>
            !src <lib/screen/color.acme>
            !src <lib/screen/m_screen.acme>
            !src <lib/strings/m_strout.acme>

            !src <lib/misc/upstart.acme>

            !addr SCREEN_RAM = DEFAULT_SCREEN_MEM

            COLOR_NEUTRAL = COLOR_LBLUE
            COLOR_ACTIVE = COLOR_WHITE


; Display @scr_code at @x, @y on the screen.
!macro scr_char_at @x, @y, @scr_code {
            +set_cursor_at @x, @y
            lda #@scr_code
            sta SCREEN_RAM + @x + @y * 40
}


; Test the next direction of the joystick and highlight it.
;
; joy_reg is LSR'ed to get the next direction.
; X = display offset (0 for joystick #1, 17 for joystick #2).
!macro test_next_direction @out_x, @out_y {
            lsr joy_reg
            bcs +
            lda #COLOR_ACTIVE
            bcc ++
+           lda #COLOR_NEUTRAL
++          sta COLOR_RAM + @out_x + @out_y*40,x
}


main:
            jsr CINT
            jsr init_screen
-           jsr read_joysticks
            jmp -


init_screen:
            +set_cursor_at 23, 18
            +m_strout .msg_joy_2

            +set_cursor_at 6, 18
            +m_strout .msg_joy_1

            ; Joystick #1
            !ct scr {
                +scr_char_at 11, 9, 'n'
                +scr_char_at 9, 11, 'w'
                +scr_char_at 11, 13, 's'
                +scr_char_at 13, 11, 'e'
            }
            +scr_char_at 11, 11, 81

            ; Joystick #2
            !ct scr {
                +scr_char_at 28, 9, 'n'
                +scr_char_at 26, 11, 'w'
                +scr_char_at 28, 13, 's'
                +scr_char_at 30, 11, 'e'
            }
            +scr_char_at 28, 11, 81

            rts

.msg_joy_1  !pet "joystick #1", 0
.msg_joy_2  !pet "joystick #2", 0

            !src <lib/strings/strout.acme>


read_joysticks:
            lda CIAPRB                      ; read joystick port 1
            sta joy_reg
            ldx #0                          ; display offset
            jsr display_joystick

            lda CIAPRA                      ; read joystick port 2
            sta joy_reg
            ldx #17                         ; display offset
            jsr display_joystick

            rts


display_joystick:
.test_n:    +test_next_direction 11, 9
.test_s:    +test_next_direction 11, 13
.test_w:    +test_next_direction 9, 11
.test_e:    +test_next_direction 13, 11
.test_fire: +test_next_direction 11, 11

            rts

; Copy of the joystick register (#1 or #2)
joy_reg:    !byte 0
