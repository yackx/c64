; Print characters in color.
;
; This routine accesses the screen and the color memory directly.

            ;ACME 0.97
            !cpu 6510

            !src <lib/screen/color.acme>
            !src <lib/mmap/main.acme>
            !src <lib/mmap/zp-free.acme>
            !src <lib/mmap/vic-ii.acme>
            !src <lib/mmap/kernal.acme>
            !src <lib/misc/upstart.acme>

            !addr SCREEN_MEM = DEFAULT_SCREEN_MEM


main:
            ; Clear screen
            jsr CINT

            ; Background and border color
            lda #COLOR_BLACK
            sta BORDER_COLOR
            sta BACKGROUND_COLOR

            ; Store screen memory vector in ZP
            lda #<SCREEN_MEM
            sta R1
            lda #>SCREEN_MEM
            sta R1+1

            ; Store color RAM vector in ZP
            lda #<COLOR_RAM
            sta R3
            lda #>COLOR_RAM
            sta R3+1

            ; Starting index
            ldy #0

            ; Screen encoding as we access the screen memory directly
            !ct scr

            ; Print @-Z
            ; current_char and stop_char are already set
            jsr print_seq

            ; Leave blank char
            iny                           

            ; Print 0-9
            lda #'0'
            sta current_char
            lda #'9'
            sta stop_char
            jsr print_seq

            ; Blank lines
            lda #$0d
            jsr CHROUT
            jsr CHROUT

            rts


print_seq:
-           lda current_color
            sta (R3),y                      ; set color

            lda current_char
            sta (R1),y                      ; print char

            iny                             ; next screen byte
            cmp stop_char
            beq .done                       ; stop char reached?

            inc current_char

            inc current_color               ; next color
            lda current_color
            and #%00001111
            bne -                           ; color black?
            inc current_color               ; skip color
            jmp -
.done:
            rts


current_char:
            !scr '@'
stop_char:
            !scr 'z'
current_color:
            !byte 1
