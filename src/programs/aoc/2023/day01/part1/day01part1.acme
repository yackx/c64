; ===========================================================================
; Advent of Code 2023 / Day 1 / Part 1
; ===========================================================================
;
; See https://adventofcode.com/2023/day/1


            ;ACME 0.97
            !cpu 6510

            !src <lib/mmap/zp_free.acme>
            !src <lib/misc/upstart.acme>

            !addr CURRENT_VECT = R1
            !addr ONE_BEFORE_INPUT = input-1

            EOF = $ff
            EOL = $0a


; Position the pointer one byte before the input data.
;
; By pointing one byte before, we simplify the subroutines exit logic
; where the pointer is incremented upfront.
!macro init_current {
            ldy #$ff
            lda #<ONE_BEFORE_INPUT
            sta CURRENT_VECT
            lda #>ONE_BEFORE_INPUT
            sta CURRENT_VECT+1
}


; Entry point.
;
; The program JMP around rather than JSR.
main:
            +init_current
            jmp find_first


; Find and store the first digit on the line.
;
; The first digit may also be the last.
find_first:
            jsr inc_current
            lda (CURRENT_VECT),y
            cmp #EOF
            beq done
            jsr is_digit
            bcs .found_f
            jmp find_first
.found_f:   sta first
            sta last                        ; In case there is only one digit.
            jmp find_last


; Find the last digit on the line.
find_last:
            jsr inc_current
            lda (CURRENT_VECT),y
            cmp #EOL
            beq .eol
            cmp #EOF
            beq done
            jsr is_digit
            bcs .found_dig
            jmp find_last
.found_dig: sta last
            jmp find_last                   ; Look for more.
.eol:       bcs update_total
            jmp find_first                  ; Next line.


; Update the total.
;
; total = total + first*10 + last
;
; We multiply by 10 by shifting left 3 times (x8)
; and then adding the original value twice.
;
; At the end, we process the next line - back to find_first.
update_total:
            lda first                       ; "char to int"
            sec
            sbc #'0'
            sta first

            lda last
            sec
            sbc #'0'
            sta last

            lda first                       ; first = first * 10
            asl
            asl
            asl
            clc
            adc first
            clc
            adc first
            clc
            adc last
            sta score
            clc
            adc total
            sta total
            bcc +
            inc total+1
+           jmp find_first


; Test if A is a digit.
;
; IN:       A = character to test
; OUT:      C = 1 if digit, 0 otherwise
is_digit:
            cmp #'0'
            bcc .not_digit
            cmp #'9'
            bcs .not_digit
            sec
            rts
.not_digit: clc
            rts


; Increment the current vector.
inc_current:
            iny
            bne +
            inc CURRENT_VECT
            bne +
            inc CURRENT_VECT+1
+           rts


; Exit the program by returning to the KERNAL.
done:       rts


first:      !byte 0
last:       !byte 0
score:      !byte 0
total:      !word 0

            ; Align to page boundary for convenience.
            !align $ff, 0, 0
input:      !bin <programs/aoc/2023/day01/part1/sample.txt>
            ; Make sure there is on EOL at the end.
            !byte EOL
            ; Add EOF to let the program complete.
            !byte EOF
