; Soft RTL horizontal scroll demo.
;
; This program uses the horizontal scroll of the screen control register
; to move one pixel at a time. When the maximum of 7 bits scroll
; is reached, we hard scroll by rewriting the text line, shifted
; by one character.
;
; 2 raster interrupts allow scrolling text on a stripe of the screen
; while the rest of the screen is not.
;
; We change the border color where scrolling takes place
; to make it more visible.
;
; The screen is set to 38 columns mode to hide the scroll motion
; taking place on the leftmost column.

            ;ACME 0.97
            !cpu 6510

            !src <lib/mmap/zp_free.acme>
            !src <lib/mem/m_mem.acme>
            !src <lib/misc/upstart.acme>

            ; Current scroll register mask (bits #2 to #0)
            !addr ZP_SCROLL_COUNT = $2a

            SCREEN = $0400

            ; Scrolling text line info
            TXT_LINE = 8
            START_OF_LINE = SCREEN + 40 * TXT_LINE

            ; Fixed text position
            FIX_TXT_LINE = 20
            FIX_TXT_COL = 13
            START_OF_FIX_LINE = SCREEN + 40 * FIX_TXT_LINE + FIX_TXT_COL

            ; Start-stop scrolling raster lines
            RASTER_ON = 100
            RASTER_OFF = 150


main:
            jsr init
            jsr set_raster_irq
            jmp *                           ; wait for IRQ


init:
            ; Trigger hard scroll on 1st IRQ
            lda #1
            sta ZP_SCROLL_COUNT

            jsr $ff81                       ; clear screen

            +copy_bytes_8 txt_fixed, START_OF_FIX_LINE, FIX_TXT_LENGTH

            ; Set screen to 38 columns mode
            lda $d016
            and #%11110111
            sta $d016

            rts


set_raster_irq:
            sei

            lda #%01111111
            sta $dc0d                       ; switch off int signals from CIA-1

            and $d011
            sta $d011                       ; scanline hi bit

            lda #RASTER_ON
            sta $d012                       ; set rasterline

            lda #<irq_scroll_on
            sta $0314
            lda #>irq_scroll_on
            sta $0315                       ; set raster interrupt vector

            lda #%00000001
            sta $d01a                       ; enable raster interrupts

            cli

            rts


irq_scroll_off:
            lda #RASTER_ON
            sta $d012
            lda #<irq_scroll_on
            sta $0314
            lda #>irq_scroll_on
            sta $0315
            jsr no_scroll
            asl $d019
            jmp $ea7e


irq_scroll_on:
            lda #RASTER_OFF
            sta $d012
            lda #<irq_scroll_off
            sta $0314
            lda #>irq_scroll_off
            sta $0315
            jsr scroll
            asl $d019
            jmp $ea7e


no_scroll:
            ; Border color
            lda #14
            sta $d020

            ; Horizontal scroll off
            lda #0
            sta $d016

            rts


scroll:
            ; Border color
            lda #1
            sta $d020

            ; One less pixel on the scroll.
            ; If count goes below 0, go back to 7 pixels and hardscroll.
            ; Do not hardscroll when scroll = 0, it would be too early
            ; and cause a glitch.
            dec ZP_SCROLL_COUNT
            bpl +

            ; Wrap scroll pixel count from 0 to 7.
            ; Trigger hard scroll.
            lda #7
            sta ZP_SCROLL_COUNT
            jsr hard_scroll

+           ; Set horizontal scroll (bits #2-#0).
            lda $d016
            and #%11111000                  ; masks for scr ctrl reg
            ora ZP_SCROLL_COUNT             ; set how many scroll pixels
            sta $d016

            rts


; Hard scroll:
; rewrite the screen line, shift 1 character
hard_scroll:
            ; Print a text line.
            ldx #39
            !addr .msg_offset_addr = *+1
-           lda marquee,x
            beq .end_of_msg
            sta START_OF_LINE,x
            dex
            bpl -
            inc .msg_offset_addr            ; next msg is offset by 1 char
            rts

.end_of_msg:
            ; Reset msg offset and bail out.
            lda #<marquee
            sta .msg_offset_addr

            rts


txt_fixed:
            !scr "some fixed text"
            !addr FIX_TXT_LENGTH = * - txt_fixed

            !align $ff, 0, 0
marquee:    !fill 40, $20
            !scr "this is a scrolling text - soft scroll - "
            !scr "rtl (right-to-left) - "
            !scr "using raster interrupts - "
            !scr "one pixel at a time."
            !byte 0
